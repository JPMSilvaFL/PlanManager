// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlanManager.Infrastructure.Data;

#nullable disable

namespace PlanManager.Infrastructure.Migrations
{
    [DbContext(typeof(PlanManagerDbContext))]
    partial class PlanManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.6.25358.103")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.License", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<DateOnly>("Expire")
                        .HasColumnType("date")
                        .HasColumnName("ExpireDate");

                    b.Property<string>("IdPlan")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Plan");

                    b.Property<string>("IdSign")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Sign");

                    b.Property<DateOnly?>("LastDaySynced")
                        .HasColumnType("date")
                        .HasColumnName("LastDaySynced");

                    b.Property<int>("ProlongationInDays")
                        .HasColumnType("int")
                        .HasColumnName("ProlongationInDays");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdPlan");

                    b.HasIndex("IdSign");

                    b.ToTable("License", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IdCompany")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("IdCompany");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Plan", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.PlanPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(28)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IdCompany")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("IdCompany");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IdCompany");

                    b.ToTable("PlanPermission", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.PlanPermissionRelation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IdPlan")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Plan");

                    b.Property<string>("IdPlanPermission")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("PlanPermission");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IdPlan");

                    b.HasIndex("IdPlanPermission");

                    b.ToTable("PlanPermissionRelation", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.Sign", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IdCompany")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Company");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Customer");

                    b.Property<DateTime?>("InitialTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("InitialTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IdCompany")
                        .IsUnique();

                    b.HasIndex("IdCustomer")
                        .IsUnique();

                    b.ToTable("Sign", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Profiles.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IdPerson")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Person");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Profiles.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasColumnName("City");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Complement");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Country");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("DDD")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar")
                        .HasColumnName("DDD");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("FirstName");

                    b.Property<bool>("HasHouseNumber")
                        .HasColumnType("bit")
                        .HasColumnName("HasHouseNumber");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar")
                        .HasColumnName("HouseNumber");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasColumnName("LastName");

                    b.Property<string>("Neighboorhood")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Neighboorhood");

                    b.Property<string>("NumberWithDigit")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar")
                        .HasColumnName("PhoneNumberWithDigit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasColumnName("State");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Status");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Street");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Zipcode");

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Profiles.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IdPerson")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("IdPerson");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Utils.LogActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Action");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Description");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("ObjectId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar")
                        .HasColumnName("User");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.ToTable("LogActivity", (string)null);
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.License", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.PlanManager.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_License_Plan");

                    b.HasOne("PlanManager.Domain.Entities.PlanManager.Sign", "Sign")
                        .WithMany()
                        .HasForeignKey("IdSign")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_License_Sign");

                    b.Navigation("Plan");

                    b.Navigation("Sign");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.Plan", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.Profiles.Person", "Company")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Plan_Person_PersonId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.PlanPermission", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.Profiles.Person", "Company")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPermission_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.PlanPermissionRelation", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.PlanManager.Plan", "Plan")
                        .WithMany("Permissions")
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPermissionRelation_Plan_PlanId");

                    b.HasOne("PlanManager.Domain.Entities.PlanManager.PlanPermission", "PlanPermission")
                        .WithMany("Plans")
                        .HasForeignKey("IdPlanPermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPermissionRelation_PlanPermission_PlanPermissionId");

                    b.Navigation("Plan");

                    b.Navigation("PlanPermission");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.Sign", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.Profiles.Person", "Company")
                        .WithOne()
                        .HasForeignKey("PlanManager.Domain.Entities.PlanManager.Sign", "IdCompany")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Sign_Company");

                    b.HasOne("PlanManager.Domain.Entities.Profiles.Person", "Customer")
                        .WithOne()
                        .HasForeignKey("PlanManager.Domain.Entities.PlanManager.Sign", "IdCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Sign_Customer");

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Profiles.Customer", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.Profiles.Person", "Person")
                        .WithOne()
                        .HasForeignKey("PlanManager.Domain.Entities.Profiles.Customer", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Profiles.User", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.Profiles.Person", "Person")
                        .WithOne()
                        .HasForeignKey("PlanManager.Domain.Entities.Profiles.User", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.Utils.LogActivity", b =>
                {
                    b.HasOne("PlanManager.Domain.Entities.Profiles.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.Plan", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("PlanManager.Domain.Entities.PlanManager.PlanPermission", b =>
                {
                    b.Navigation("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
